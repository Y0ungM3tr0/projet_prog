manque:
1- ATTENTION : un adhérent ne peut pas s’inscrire plus d’une fois à la même activité
2- ATTENTION : un adhérent ne peut pas noter une séance plus d’une fois
3- Ladministrateur doit pouvoir exporter dans des fichiers CSV :
    - La liste des adhérents
    - La liste des activités
4- Vous devez également ajouter au moins 3 autres statistiques qui inclues les activités, les séances
et les participants.
5- texte change a la page gestion activite pour la recherche








- Trouver le prix moyen par activité pour chaque participant
une moyenne de ce que le participant a payé pour toutes les activités auxquelles il a participé. Si une personne a payé 100$ pour l'activité A et 150 pour une activité B, la moyenne est (100+150)/2 => moyenne = 125$
CREATE VIEW moy_prix_activite_chaque_adherent AS
SELECT
    adherent.matricule,
    nom,
    prenom,

    AVG(a.prix_vente_client) AS moy_prix_activite
FROM adherent
INNER JOIN reservation r on adherent.matricule = r.matricule
INNER JOIN seance s on r.idSeance = s.idSeance
INNER JOIN activite a on s.idActivite = a.idActivite
GROUP BY adherent.matricule;


- Afficher les notes d'appréciation pour chaque activité
la moyenne des notes pour une activité données par les adhérents qui y ont participé
CREATE VIEW moy_note_par_activite AS
SELECT
    idAppreciation,
    AVG(note_appreciation) AS moy_note_par_activite,

    a.idActivite,
    nomActivite
FROM appreciation
INNER JOIN seance s on appreciation.idSeance = s.idSeance
INNER JOIN activite a on s.idActivite = a.idActivite
GROUP BY a.idActivite;
SELECT * FROM moy_note_par_activite;


-- Afficher la moyenne des notes d'appréciation pour toutes les activités
CREATE VIEW moy_note_toutes_activites AS
SELECT
    idAppreciation,
    AVG(note_appreciation) AS moy_note_toutes_activites
FROM appreciation
INNER JOIN seance s on appreciation.idSeance = s.idSeance
INNER JOIN activite a on s.idActivite = a.idActivite;

- Afficher le nombre de participants pour chaque activité
la somme des participants pour une même activité. Si une personne s'inscrit à deux séances d'une même activité, ça compte pour une seule participation
CREATE VIEW nbr_participant_par_activite AS
SELECT
    a.idActivite,
    a.nomActivite,
    COUNT(DISTINCT matricule) nbr_participant_par_activite
FROM reservation
INNER JOIN seance s on reservation.idSeance = s.idSeance
INNER JOIN activite a on s.idActivite = a.idActivite
GROUP BY a.idActivite;


seance
- voir la description

reservation
- ne pas s'inscrire plus qu'une fois

appréciation
- voir nos séance passé:
SELECT
    *
FROM seance
INNER JOIN reservation r on seance.idSeance = r.idSeance
WHERE date_seance < CURDATE() AND matricule = 'ÉC-1998-609';
- pouvoir laissé une note
- 



DELIMITER //
CREATE FUNCTION Adherent_inscrit(f_matricule VARCHAR(110), f_idSeance INT)
RETURNS BOOL
DETERMINISTIC
BEGIN
    -- Si incrit return TRUE, sinon FALSE

    IF ((SELECT count(matricule) FROM reservation WHERE matricule = f_matricule AND idSeance = f_idSeance) = 1) THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END //
DELIMITER ;

SELECT count(matricule) FROM reservation WHERE matricule = 'BP-1990-473' AND idSeance = 1;
SELECT Adherent_inscrit('BP-1990-473', 1) AS validation_reservation;







DELIMITER //
CREATE procedure infos_reservations_utilisateur(
    IN p_matricule VARCHAR(110))
BEGIN
    SELECT
        idReservation,
        reservation.idSeance,
        matricule,
        nomActivite,
        date_seance,
        heure
    FROM reservation
    INNER JOIN seance s on reservation.idSeance = s.idSeance
    INNER JOIN activite a on s.idActivite = a.idActivite
    WHERE matricule = p_matricule;
END//
DELIMITER ;
CALL infos_reservations_utilisateur('BP-1990-473');
drop procedure infos_reservations_utilisateur;




ÉC-1998-609



appreciation
DELIMITER //
CREATE procedure infos_seance_reservations_utilisateur_pour_appreciation(
    IN p_matricule VARCHAR(110))
BEGIN
    SELECT
        s.idSeance,
        s.idActivite,
        s.date_seance,
        s.heure,
        s.nbr_place_disponible,
        s.nbr_inscription,
        s.moyenne_appreciation,

        a.nomActivite,
        a.description,

        r.idReservation,
        r.matricule
    FROM seance s
    INNER JOIN reservation r on s.idSeance = r.idSeance
    INNER JOIN activite a on s.idActivite = a.idActivite
    WHERE date_seance < CURDATE() AND matricule = p_matricule;
END//
DELIMITER ;
CALL infos_seance_reservations_utilisateur_pour_appreciation('ÉC-1998-609');
drop procedure infos_seance_reservations_utilisateur_pour_appreciation;
